grf {
    grfid: "\5F\5F\04\08";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION, string(STR_GRF_DESC_EXTRA), string(STR_GRF_DESC_README));
    url: string(STR_GRF_URL);
    version: REPO_REVISION;
    min_compatible_version: 5;

    param 0 {
        param_cargo_decay {
            type: int;
            name: string(STR_PARAM_CARGO_DECAY);
            desc: string(STR_PARAM_CARGO_DECAY_DESC);
            min_value: 0;
            max_value: 2;
            def_value: 0;
            names: {
                0: string(STR_PARAM_NORMAL);
                1: string(STR_PARAM_TIMES_2);
                2: string(STR_PARAM_TIMES_4);
            };
        }
    }

    param 1 {
        param_loading_speed_local {
            type: int;
            name: string(STR_PARAM_LOADING_SPEED_LOCAL);
            desc: string(STR_PARAM_LOADING_SPEED_LOCAL_DESC);
            min_value: 8;
            max_value: 255;
            def_value: 40;
        }
    }
    param 2 {
        param_loading_speed_express {
            type: int;
            name: string(STR_PARAM_LOADING_SPEED_EXPRESS);
            desc: string(STR_PARAM_LOADING_SPEED_EXPRESS_DESC);
            min_value: 4;
            max_value: 255;
            def_value: 25;
        }
    }
    param 3 {
        param_loading_speed_sleeper {
            type: int;
            name: string(STR_PARAM_LOADING_SPEED_SLEEPER);
            desc: string(STR_PARAM_LOADING_SPEED_SLEEPER_DESC);
            min_value: 2;
            max_value: 255;
            def_value: 15;
        }
    }
    param 4 {
        param_purchase_cost {
            type: int;
            name: string(STR_PARAM_PURCHASE_COST);
            desc: string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 2;
            names: {
                0: string(STR_PARAM_DIVIDE_16);
                1: string(STR_PARAM_DIVIDE_8);
                2: string(STR_PARAM_DIVIDE_4);
                3: string(STR_PARAM_DIVIDE_2);
                4: string(STR_PARAM_NORMAL);
                5: string(STR_PARAM_TIMES_2);
                6: string(STR_PARAM_TIMES_4);
                7: string(STR_PARAM_TIMES_8);
                8: string(STR_PARAM_TIMES_16);
            };
        }
    }
    param 5 {
        param_running_cost {
            type: int;
            name: string(STR_PARAM_RUNNING_COST);
            desc: string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 2;
            names: {
                0: string(STR_PARAM_DIVIDE_16);
                1: string(STR_PARAM_DIVIDE_8);
                2: string(STR_PARAM_DIVIDE_4);
                3: string(STR_PARAM_DIVIDE_2);
                4: string(STR_PARAM_NORMAL);
                5: string(STR_PARAM_TIMES_2);
                6: string(STR_PARAM_TIMES_4);
                7: string(STR_PARAM_TIMES_8);
                8: string(STR_PARAM_TIMES_16);
            };
        }
    }
    param 6 {
        param_running_cost_wagon_enable {
            type: bool;
            name: string(STR_PARAM_RUNNING_COST_WAGON_ENABLE);
            desc: string(STR_PARAM_RUNNING_COST_WAGON_ENABLE_DESC);
            def_value: 1;
            bit: 1;
        }
    }
    param 7 {
        param_volume {
            type: int;
            name: string(STR_PARAM_VOL);
            desc: string(STR_PARAM_VOL_DESC);
            min_value: 0;
            max_value: 3;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VOL_DISABLED);
                1: string(STR_PARAM_VOL_33);
                2: string(STR_PARAM_VOL_66);
                3: string(STR_PARAM_NORMAL);
            };
        }
    }
}

basecost {
    PR_BUILD_VEHICLE_TRAIN: param_purchase_cost - 2;
    PR_BUILD_VEHICLE_WAGON: param_purchase_cost + 2;
    PR_RUNNING_TRAIN_STEAM: param_running_cost - 3;
    PR_RUNNING_TRAIN_DIESEL: param_running_cost - 3;
    PR_RUNNING_TRAIN_ELECTRIC: param_running_cost - 3;
 }

/* disable original trains */
disable_item(FEAT_TRAINS, 0, 115);

/* only OpenTTD is supported, not enforced though */
if (ttd_platform != PLATFORM_OPENTTD) {
    error(ERROR, USED_WITH, "OpenTTD");
}

/* fix depot view */
train_width_32_px = 1;
traininfo_y_offset = 2;

/* 1 px empty spriteset */
spriteset (spriteset_empty, "src/empty.png") {
    [0, 0, 1, 1, 0, 0]
    [0, 0, 1, 1, 0, 0] }